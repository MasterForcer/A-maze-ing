/*
 * A-maze-ing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * From the current tile where you stand, what actions are available on it and on the surrounding tiles.
 */
@ApiModel(description = "From the current tile where you stand, what actions are available on it and on the surrounding tiles.")
public class PossibleActionsAndCurrentScore {
  @SerializedName("possibleMoveActions")
  private List<MoveAction> possibleMoveActions = null;

  @SerializedName("canCollectScoreHere")
  private Boolean canCollectScoreHere = null;

  @SerializedName("canExitMazeHere")
  private Boolean canExitMazeHere = null;

  @SerializedName("currentScoreInHand")
  private Integer currentScoreInHand = null;

  @SerializedName("currentScoreInBag")
  private Integer currentScoreInBag = null;

  public PossibleActionsAndCurrentScore possibleMoveActions(List<MoveAction> possibleMoveActions) {
    this.possibleMoveActions = possibleMoveActions;
    return this;
  }

  public PossibleActionsAndCurrentScore addPossibleMoveActionsItem(MoveAction possibleMoveActionsItem) {
    if (this.possibleMoveActions == null) {
      this.possibleMoveActions = new ArrayList<MoveAction>();
    }
    this.possibleMoveActions.add(possibleMoveActionsItem);
    return this;
  }

   /**
   * The actions available on your surrounding tiles (lookahead of one tile).
   * @return possibleMoveActions
  **/
  @ApiModelProperty(value = "The actions available on your surrounding tiles (lookahead of one tile).")
  public List<MoveAction> getPossibleMoveActions() {
    return possibleMoveActions;
  }

  public void setPossibleMoveActions(List<MoveAction> possibleMoveActions) {
    this.possibleMoveActions = possibleMoveActions;
  }

  public PossibleActionsAndCurrentScore canCollectScoreHere(Boolean canCollectScoreHere) {
    this.canCollectScoreHere = canCollectScoreHere;
    return this;
  }

   /**
   * In the tile where you are standing, is it possible to collect score (from hand to bag).
   * @return canCollectScoreHere
  **/
  @ApiModelProperty(value = "In the tile where you are standing, is it possible to collect score (from hand to bag).")
  public Boolean isCanCollectScoreHere() {
    return canCollectScoreHere;
  }

  public void setCanCollectScoreHere(Boolean canCollectScoreHere) {
    this.canCollectScoreHere = canCollectScoreHere;
  }

  public PossibleActionsAndCurrentScore canExitMazeHere(Boolean canExitMazeHere) {
    this.canExitMazeHere = canExitMazeHere;
    return this;
  }

   /**
   * In the tile where you are standing, is it possible to exit the maze. Remember you will lose any score in hand  and only be rewarded with the score you have in your bag.
   * @return canExitMazeHere
  **/
  @ApiModelProperty(value = "In the tile where you are standing, is it possible to exit the maze. Remember you will lose any score in hand  and only be rewarded with the score you have in your bag.")
  public Boolean isCanExitMazeHere() {
    return canExitMazeHere;
  }

  public void setCanExitMazeHere(Boolean canExitMazeHere) {
    this.canExitMazeHere = canExitMazeHere;
  }

  public PossibleActionsAndCurrentScore currentScoreInHand(Integer currentScoreInHand) {
    this.currentScoreInHand = currentScoreInHand;
    return this;
  }

   /**
   * What is the score you currently have in your hand. Find a score collection point and issue a collect  score command to move this score into your bag. Score in your hand is not awarded when you exit a maze.
   * @return currentScoreInHand
  **/
  @ApiModelProperty(value = "What is the score you currently have in your hand. Find a score collection point and issue a collect  score command to move this score into your bag. Score in your hand is not awarded when you exit a maze.")
  public Integer getCurrentScoreInHand() {
    return currentScoreInHand;
  }

  public void setCurrentScoreInHand(Integer currentScoreInHand) {
    this.currentScoreInHand = currentScoreInHand;
  }

  public PossibleActionsAndCurrentScore currentScoreInBag(Integer currentScoreInBag) {
    this.currentScoreInBag = currentScoreInBag;
    return this;
  }

   /**
   * What is the score currently in your bag. When you exit the maze this score will be rewarded to your total  overall score.
   * @return currentScoreInBag
  **/
  @ApiModelProperty(value = "What is the score currently in your bag. When you exit the maze this score will be rewarded to your total  overall score.")
  public Integer getCurrentScoreInBag() {
    return currentScoreInBag;
  }

  public void setCurrentScoreInBag(Integer currentScoreInBag) {
    this.currentScoreInBag = currentScoreInBag;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PossibleActionsAndCurrentScore possibleActionsAndCurrentScore = (PossibleActionsAndCurrentScore) o;
    return Objects.equals(this.possibleMoveActions, possibleActionsAndCurrentScore.possibleMoveActions) &&
        Objects.equals(this.canCollectScoreHere, possibleActionsAndCurrentScore.canCollectScoreHere) &&
        Objects.equals(this.canExitMazeHere, possibleActionsAndCurrentScore.canExitMazeHere) &&
        Objects.equals(this.currentScoreInHand, possibleActionsAndCurrentScore.currentScoreInHand) &&
        Objects.equals(this.currentScoreInBag, possibleActionsAndCurrentScore.currentScoreInBag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(possibleMoveActions, canCollectScoreHere, canExitMazeHere, currentScoreInHand, currentScoreInBag);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PossibleActionsAndCurrentScore {\n");

    sb.append("    possibleMoveActions: ").append(toIndentedString(possibleMoveActions)).append("\n");
    sb.append("    canCollectScoreHere: ").append(toIndentedString(canCollectScoreHere)).append("\n");
    sb.append("    canExitMazeHere: ").append(toIndentedString(canExitMazeHere)).append("\n");
    sb.append("    currentScoreInHand: ").append(toIndentedString(currentScoreInHand)).append("\n");
    sb.append("    currentScoreInBag: ").append(toIndentedString(currentScoreInBag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

