/*
 * A-maze-ing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * A tile
 */
@ApiModel(description = "A tile")
public class MoveAction {
  /**
   * What is the relative direction of this tile.
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    NUMBER_0(0),

    NUMBER_1(1),

    NUMBER_2(2),

    NUMBER_3(3);

    private Integer value;

    DirectionEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String text) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        Integer value = jsonReader.nextInt();
        return DirectionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("direction")
  private DirectionEnum direction = null;

  @SerializedName("isStart")
  private Boolean isStart = null;

  @SerializedName("allowsExit")
  private Boolean allowsExit = null;

  @SerializedName("allowsScoreCollection")
  private Boolean allowsScoreCollection = null;

  @SerializedName("hasBeenVisited")
  private Boolean hasBeenVisited = null;

  @SerializedName("rewardOnDestination")
  private Integer rewardOnDestination = null;

  public MoveAction direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

   /**
   * What is the relative direction of this tile.
   * @return direction
  **/
  @ApiModelProperty(value = "What is the relative direction of this tile.")
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }

  public MoveAction isStart(Boolean isStart) {
    this.isStart = isStart;
    return this;
  }

   /**
   * Is this the tile where the maze begun.
   * @return isStart
  **/
  @ApiModelProperty(value = "Is this the tile where the maze begun.")
  public Boolean isIsStart() {
    return isStart;
  }

  public void setIsStart(Boolean isStart) {
    this.isStart = isStart;
  }

  public MoveAction allowsExit(Boolean allowsExit) {
    this.allowsExit = allowsExit;
    return this;
  }

   /**
   * Can you exit the maze on this tile.
   * @return allowsExit
  **/
  @ApiModelProperty(value = "Can you exit the maze on this tile.")
  public Boolean isAllowsExit() {
    return allowsExit;
  }

  public void setAllowsExit(Boolean allowsExit) {
    this.allowsExit = allowsExit;
  }

  public MoveAction allowsScoreCollection(Boolean allowsScoreCollection) {
    this.allowsScoreCollection = allowsScoreCollection;
    return this;
  }

   /**
   * Does this tile allow for score collection (moving score from your hand to your bag).
   * @return allowsScoreCollection
  **/
  @ApiModelProperty(value = "Does this tile allow for score collection (moving score from your hand to your bag).")
  public Boolean isAllowsScoreCollection() {
    return allowsScoreCollection;
  }

  public void setAllowsScoreCollection(Boolean allowsScoreCollection) {
    this.allowsScoreCollection = allowsScoreCollection;
  }

  public MoveAction hasBeenVisited(Boolean hasBeenVisited) {
    this.hasBeenVisited = hasBeenVisited;
    return this;
  }

   /**
   * Have you visited this tile before.
   * @return hasBeenVisited
  **/
  @ApiModelProperty(value = "Have you visited this tile before.")
  public Boolean isHasBeenVisited() {
    return hasBeenVisited;
  }

  public void setHasBeenVisited(Boolean hasBeenVisited) {
    this.hasBeenVisited = hasBeenVisited;
  }

  public MoveAction rewardOnDestination(Integer rewardOnDestination) {
    this.rewardOnDestination = rewardOnDestination;
    return this;
  }

   /**
   * What reward is available on this tile.
   * @return rewardOnDestination
  **/
  @ApiModelProperty(value = "What reward is available on this tile.")
  public Integer getRewardOnDestination() {
    return rewardOnDestination;
  }

  public void setRewardOnDestination(Integer rewardOnDestination) {
    this.rewardOnDestination = rewardOnDestination;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MoveAction moveAction = (MoveAction) o;
    return Objects.equals(this.direction, moveAction.direction) &&
        Objects.equals(this.isStart, moveAction.isStart) &&
        Objects.equals(this.allowsExit, moveAction.allowsExit) &&
        Objects.equals(this.allowsScoreCollection, moveAction.allowsScoreCollection) &&
        Objects.equals(this.hasBeenVisited, moveAction.hasBeenVisited) &&
        Objects.equals(this.rewardOnDestination, moveAction.rewardOnDestination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(direction, isStart, allowsExit, allowsScoreCollection, hasBeenVisited, rewardOnDestination);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MoveAction {\n");

    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    isStart: ").append(toIndentedString(isStart)).append("\n");
    sb.append("    allowsExit: ").append(toIndentedString(allowsExit)).append("\n");
    sb.append("    allowsScoreCollection: ").append(toIndentedString(allowsScoreCollection)).append("\n");
    sb.append("    hasBeenVisited: ").append(toIndentedString(hasBeenVisited)).append("\n");
    sb.append("    rewardOnDestination: ").append(toIndentedString(rewardOnDestination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

